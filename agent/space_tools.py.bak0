"""
工具的作用是发出指令
因为空间态势分析是基于Cesium的前端应用程序，所以工具的作用是发出指令，前端执行相应的操作。
"""
from langchain_core.tools import tool
from agent.space.space_types import ScenarioConfig, EntityConfig, SatelliteTLEParams, ToolResult, EntityType, EntityPosition
from infrastructure.logger import log
from typing import Optional, List, Dict, Any
import json
from datetime import datetime
import re
    
# 处理datetime对象序列化
def default_serializer(obj):
    if isinstance(obj, datetime):
        return obj.isoformat()
    raise TypeError(f"Object of type {obj.__class__.__name__} is not JSON serializable")

@tool(args_schema=ScenarioConfig)
def create_scenario(name: str, centralBody: str, startTime: str, endTime: str, description: Optional[str] = None) -> dict:
    """
    创建一个新的空间场景。
    
    Args:
        name (str): 场景名称。
        centralBody (str): 中心天体。
        startTime (str): 开始时间。
        endTime (str): 结束时间。
        description (Optional[str]): 场景描述。

    Returns:
        ToolResult: 操作结果。
    """
    log.info(f"创建场景工具: {name}, {centralBody}, {startTime}, {endTime}, {description}")
    result = ToolResult(message=f"场景 '{name}' 已成功创建。",func="createScene",args=json.dumps(args, ensure_ascii=False))

    # 日期格式正则表达式，支持两种格式：
    # 1. YYYY-MM-DD
    # 2. YYYY-MM-DDThh:mm:ss.sssZ (Z可选)
    date_pattern = r'^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d{3})?(?:Z)?)?$'
    if not re.match(date_pattern, start) or not re.match(date_pattern, end):
        return result.set_success(False).set_message("请告诉我创建场景的纪元开始时间和结束时间").model_dump()
    
    try:
        args_str = json.dumps(args, default=default_serializer, ensure_ascii=False)
        result.set_args(args_str)
    except TypeError as e:
        log.error(f"Error serializing args: {e}")
        result.set_success(False)

    return ToolResult(success=success, message=message, func="createScene", args=args_str).model_dump()

@tool
def rename_scenerio(new_name: str) -> ToolResult:
    """
    重命名当前场景。

    Args:
        new_name (str): 新的场景名称。
    Returns:
        ToolResult: 操作结果。
    """
    log.info(f"模拟重命名场景: {new_name}")
    # 在实际应用中，这里会调用 YYASTK 或其他服务的 API
    # result_from_backend = call_yyastk_rename_scenerio(...)
    success = True
    message = f"场景已成功重命名为 '{new_name}'。" if success else "场景重命名失败。"
    return ToolResult(success=success, message=message, func="renameScene", args=locals())

@tool(args_schema=EntityConfig)
def add_point_entity(name: str, entityType:EntityType,position: Optional[Dict[str, Any]] = None, properties: Optional[Dict[str, Any]] = None) -> dict:
    """
    向当前场景添加一个实体类型为点的对象

    Args:
        name (str): 实体名称。
        entityType (EntityType): 实体类型。
        position (Optional[Dict[str, Any]]): 位置信息 (例如 {"longitude": 116.0, "latitude": 40.0})。
        properties (Optional[Dict[str, Any]]): 其他属性 (例如 TLE)。

    Returns:
        ToolResult: 操作结果。
    """
    log.info(f"模拟添加实体: {EntityType.PLACE}, {name}, position={position}, properties={properties}")
    # 在实际应用中，这里会调用 YYASTK 或其他服务的 API
    # result_from_backend = call_yyastk_add_entity(...)
    success = True 
    message = f"实体: '{name}', 类型: '{EntityType.PLACE}' 已成功添加。" if success else "实体添加失败。"
    return ToolResult(success=success, message=message, func="addPointEntity", args=locals()).model_dump()

@tool(args_schema=SatelliteTLEParams)
def add_satellite_entity(
    Start: str,
    Stop: str,
    SatelliteNumber: str,
    TLEs: List[str]
) -> ToolResult:
    """
    向当前场景添加一个实体类型为卫星的对象
    使用SGP4来计算卫星轨道

    Args:
        Start: 纪元UTC开始时间，例如："2021-05-01T00:00:00.000Z"
        Stop: 纪元UTC结束时间，例如："2021-05-02T00:00:00.000Z"
        SatelliteNumber: 卫星编号，例如："SL-44291"
        TLEs: 两行轨道数据
    Returns:
        ToolResult: 操作结果。
    """
    log.info(f"卫星轨道计算: SatNo={SatelliteNumber}, Start={Start}, Stop={Stop}, TLEs={TLEs}")
    # 在实际应用中，这里会调用轨道计算库或服务
    success = True
    message = f"卫星 {SatelliteNumber} 的轨道计算完成。" if success else "轨道计算失败。"
    # 实际应用中可能返回计算出的位置数据
    return ToolResult(success=success, message=message, func="addSatelliteEntity", args=locals())
@tool
def clear_entities() -> dict:
    """
    清除当前场景中的所有实体。
    
    Returns:
        ToolResult: 操作结果。
    """
    log.info("模拟清除所有实体")
    success = True 
    message = "所有实体已成功清除。" if success else "清除实体失败。"
    return ToolResult(success=success, message=message, func="clearEntities", args=None).model_dump()

@tool
def clear_scene() -> dict:
    """
    清除当前场景，包括所有实体和设置。
    
    Returns:
        ToolResult: 操作结果。
    """
    log.info("模拟清除场景")
    success = True 
    message = "场景已成功清除。" if success else "清除场景失败。"
    return ToolResult(success=success, message=message, func="clearScene", args=None).model_dump()


# 将所有工具收集到一个列表中
space_tools = [create_scenario, rename_scenerio, add_point_entity, add_satellite_entity, clear_entities, clear_scene]